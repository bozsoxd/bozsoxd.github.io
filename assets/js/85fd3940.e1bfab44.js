"use strict";(self.webpackChunkrefernces_docs=self.webpackChunkrefernces_docs||[]).push([[960],{5367:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"mankala","title":"Mankala Boardgame in Java","description":"Description","source":"@site/docs/mankala.md","sourceDirName":".","slug":"/mankala","permalink":"/mankala","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"Mankala Boardgame in Java","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Connect4 MiniMax algorithm","permalink":"/AI-projects"},"next":{"title":"OpenGL projects","permalink":"/opengl"}}');var s=t(4848),i=t(8453);const o={title:"Mankala Boardgame in Java",sidebar_position:7},r=void 0,c={},l=[{value:"Description",id:"description",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Class Diagram",id:"class-diagram",level:2},{value:"User manual",id:"user-manual",level:2},{value:"Screenshots",id:"screenshots",level:2},{value:"Menu screen",id:"menu-screen",level:3},{value:"Game",id:"game",level:3},{value:"Projects Content",id:"projects-content",level:2}];function h(e){const n={admonition:"admonition",h2:"h2",h3:"h3",img:"img",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"Mancala is a generic name that encompasses a family of two-player board games. Mancala plays a similar role in African and Asian countries as chess does in Europe. I am implementing a specific rule-based implementation of this family. The game board can be taken as a 2x8 matrix, in which the first and last columns can be understood as a hole, and each row of every other column can also be considered as a hole, so the board consists of a total of 12 single-cell and 2 2-cell holes."}),"\n",(0,s.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsx)(n.p,{children:"I implemented the game in Java and used Java Swing for the graphical display."}),"\n",(0,s.jsx)(n.h2,{id:"class-diagram",children:"Class Diagram"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"use-case diagram",src:t(3976).A+"",width:"1248",height:"1268"})}),"\n",(0,s.jsx)(n.h2,{id:"user-manual",children:"User manual"}),"\n",(0,s.jsx)(n.p,{children:"When you start the game, the menu appears, where you can set the names of the two players. You can start a new game with New Game, while you can continue the last saved game state with Load Game. At the bottom of the menu, you can set whether you want to play against the machine or alone. When the game starts, the menu closes and the game board opens. The player whose name is in the bottom row starts. According to the rules, he can select the hole from which he wants to throw the stones by clicking on the specified button. After that, the move takes place, which can be seen on the game board, and the other player's turn follows, which can also be seen at the bottom of the screen. If you are playing against the machine, the machine's move happens directly after your own move, so you don't have to wait for it to think. By clicking on the surrender button, the game ends and the opposing player wins. If the game ends with someone's victory, the program will display the winner, then after confirming this, you will return to the main menu, from where you can start a new game."}),"\n",(0,s.jsx)(n.h2,{id:"screenshots",children:"Screenshots"}),"\n",(0,s.jsx)(n.h3,{id:"menu-screen",children:"Menu screen"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Menu screen",src:t(9595).A+"",width:"285",height:"287"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"You can play it with your friend or against the computer."})}),"\n",(0,s.jsx)(n.h3,{id:"game",children:"Game"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Game",src:t(9156).A+"",width:"590",height:"587"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"The board is made up of buttons, by clicking on the appropriate one, we can choose from which the stones will be taken out."})}),"\n",(0,s.jsx)(n.h2,{id:"projects-content",children:"Projects Content"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Folder(s)/File(s)"}),(0,s.jsx)(n.th,{children:"about"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"mankala"}),(0,s.jsx)(n.td,{children:"The source of the projekt"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Dokument\xe1ci\xf3.pdf"}),(0,s.jsx)(n.td,{children:"Hungarian documentation"})]})]})]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},3976:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/mankala-class-394014192c7a22dac067243204b6e350.png"},9156:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/mankala-game-f49916f8d5752db3e3153f04c3dd7dce.png"},9595:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/mankala-menu-46c8b92318f73dc4bcb169fa935c4021.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var a=t(6540);const s={},i=a.createContext(s);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);